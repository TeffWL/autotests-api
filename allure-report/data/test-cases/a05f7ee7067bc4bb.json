{"uid":"a05f7ee7067bc4bb","name":"Get user me","fullName":"tests.users.test_users.TestUsers#test_ger_user_me","historyId":"80e51c848c2211b2acc80dd4bcc8bf5e","time":{"start":1751723956608,"stop":1751723956613,"duration":5},"status":"broken","statusMessage":"AttributeError: 'CreateUserRequestSchema' object has no attribute 'user'","statusTrace":"self = <tests.users.test_users.TestUsers object at 0x1040c1c10>\nfunction_user = UserFixture(request=CreateUserRequestSchema(email='omarbennett@example.net', password='FHw5!rgpr^', last_name='Johnsto...9dff-dc1ca0493299', email='omarbennett@example.net', last_name='Johnston', first_name='Carly', middle_name='Crystal')))\nprivate_users_client = <clients.users.private_users_client.PrivateUsersClient object at 0x1042f5130>\n\n    @allure.title(\"Get user me\")  # Добавляем человекочитаемый заголовок\n    def test_ger_user_me(\n            self,\n            function_user: UserFixture,\n            private_users_client: PrivateUsersClient\n    ):\n        response = private_users_client.get_user_me_api()\n        response_data = GetUserResponseSchema.model_validate_json(response.text)\n    \n        assert_status_code(response.status_code, HTTPStatus.OK)\n>       assert_get_user_response(function_user.request, response_data)\n\ntests/users/test_users.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools/assertions/users.py:46: in assert_get_user_response\n    assert_user(get_user_response.user, create_user_response.user)\n                ^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = CreateUserRequestSchema(email='omarbennett@example.net', password='FHw5!rgpr^', last_name='Johnston', first_name='Carly', middle_name='Crystal'), item = 'user'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'CreateUserRequestSchema' object has no attribute 'user'\n\n../../projects/bot-python/.venv/lib/python3.12/site-packages/pydantic/main.py:991: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1751723945914,"stop":1751723945915,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"event_loop_policy","time":{"start":1751723945915,"stop":1751723945915,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"public_users_client","time":{"start":1751723956056,"stop":1751723956071,"duration":15},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"function_user","time":{"start":1751723956071,"stop":1751723956327,"duration":256},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"private_users_client","time":{"start":1751723956327,"stop":1751723956608,"duration":281},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"regression"},{"name":"tag","value":"users"},{"name":"parentSuite","value":"tests.users"},{"name":"suite","value":"test_users"},{"name":"subSuite","value":"TestUsers"},{"name":"host","value":"VIS-SSQ05N"},{"name":"thread","value":"89622-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.users.test_users"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["regression","users"]},"source":"a05f7ee7067bc4bb.json","parameterValues":[]}