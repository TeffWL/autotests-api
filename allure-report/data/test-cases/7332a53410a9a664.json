{"uid":"7332a53410a9a664","name":"test_get_user_me","fullName":"tests.users.test_get_user#test_get_user_me","historyId":"ca811f90b10c97a9dbd6ed2feecb475e","time":{"start":1751738085175,"stop":1751738085179,"duration":4},"status":"broken","statusMessage":"AttributeError: 'CreateUserRequestSchema' object has no attribute 'user'","statusTrace":"function_user = UserFixture(request=CreateUserRequestSchema(email='kellersamuel@example.net', password='8HrYyf0q(1', last_name='Smith'...b5-a37c-675fd776da22', email='kellersamuel@example.net', last_name='Smith', first_name='Steven', middle_name='Kevin')))\nauthentication_client = <clients.authentication.authentication_client.AuthenticationClient object at 0x103ad56d0>\nprivate_users_client = <clients.users.private_users_client.PrivateUsersClient object at 0x103ad7260>\n\n    @pytest.mark.users\n    @pytest.mark.regression\n    def test_get_user_me(\n            function_user: UserFixture,  # Используем фикстуру для создания пользователя\n            authentication_client: AuthenticationClient,\n            private_users_client: PrivateUsersClient):\n        # Создаем новго пользователя и получаем метадату\n        LoginRequestSchema(email=function_user.email, password=function_user.password)\n    \n        #Делаем запрос к GET /api/v1/users/me\n        get_user_response = private_users_client.get_user_me_api()\n    \n        response_data = GetUserResponseSchema.model_validate_json(get_user_response.text)\n    \n        # Асерт сравнения тела на создание и полученного пользователя\n>       assert_get_user_response(function_user.request, response_data)\n\ntests/users/test_get_user.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntools/assertions/users.py:46: in assert_get_user_response\n    assert_user(get_user_response.user, create_user_response.user)\n                ^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = CreateUserRequestSchema(email='kellersamuel@example.net', password='8HrYyf0q(1', last_name='Smith', first_name='Steven', middle_name='Kevin'), item = 'user'\n\n    def __getattr__(self, item: str) -> Any:\n        private_attributes = object.__getattribute__(self, '__private_attributes__')\n        if item in private_attributes:\n            attribute = private_attributes[item]\n            if hasattr(attribute, '__get__'):\n                return attribute.__get__(self, type(self))  # type: ignore\n    \n            try:\n                # Note: self.__pydantic_private__ cannot be None if self.__private_attributes__ has items\n                return self.__pydantic_private__[item]  # type: ignore\n            except KeyError as exc:\n                raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n        else:\n            # `__pydantic_extra__` can fail to be set if the model is not yet fully initialized.\n            # See `BaseModel.__repr_args__` for more details\n            try:\n                pydantic_extra = object.__getattribute__(self, '__pydantic_extra__')\n            except AttributeError:\n                pydantic_extra = None\n    \n            if pydantic_extra:\n                try:\n                    return pydantic_extra[item]\n                except KeyError as exc:\n                    raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}') from exc\n            else:\n                if hasattr(self.__class__, item):\n                    return super().__getattribute__(item)  # Raises AttributeError if appropriate\n                else:\n                    # this is the current error\n>                   raise AttributeError(f'{type(self).__name__!r} object has no attribute {item!r}')\nE                   AttributeError: 'CreateUserRequestSchema' object has no attribute 'user'\n\n../../projects/bot-python/.venv/lib/python3.12/site-packages/pydantic/main.py:991: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1751738075869,"stop":1751738075870,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"event_loop_policy","time":{"start":1751738075870,"stop":1751738075870,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"public_users_client","time":{"start":1751738084608,"stop":1751738084624,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"function_user","time":{"start":1751738084624,"stop":1751738084877,"duration":253},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"authentication_client","time":{"start":1751738084877,"stop":1751738084893,"duration":16},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"private_users_client","time":{"start":1751738084893,"stop":1751738085174,"duration":281},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0}],"afterStages":[],"labels":[{"name":"tag","value":"regression"},{"name":"tag","value":"users"},{"name":"parentSuite","value":"tests.users"},{"name":"suite","value":"test_get_user"},{"name":"host","value":"VIS-SSQ05N"},{"name":"thread","value":"91217-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.users.test_get_user"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"a732d10b830d2f09","status":"broken","statusDetails":"AttributeError: 'CreateUserRequestSchema' object has no attribute 'user'","time":{"start":1751723955180,"stop":1751723955185,"duration":5}}],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":["regression","users"]},"source":"7332a53410a9a664.json","parameterValues":[]}